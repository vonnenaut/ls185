#! /usr/bin/env ruby

require 'pg'

class ExpenseData
  def initialize
    @db_connection = PG.connect(dbname: "ls185")
  end

  def list_expenses
    result = @db_connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_expenses(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @db_connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @db_connection.exec_params(sql, [term])
    display_expenses(result)
  end

  def delete_expense(input_id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    number_included = @db_connection.exec_params(sql, [input_id])
    if number_included.ntuples == 1
      sql = "DELETE FROM expenses WHERE id=$1;"
      @db_connection.exec_params(sql, [input_id])
    else
      abort "You must use a valid id number from the list."
    end
  end

  private

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift

    case command
    when "list"
      @application.list_expenses
    when "add"
      amount = args[0]
      memo = args[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "search"
      term = args[0]
      abort "You must provide a search term." unless term
      @application.search_expenses(term)
    when "delete"
      input_id = args[0]
      abort "You must provide a valid id number." unless input_id
      @application.delete_expense(input_id)
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
    An expense recording system
  
    Commands:
  
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)
